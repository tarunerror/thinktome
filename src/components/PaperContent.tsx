import { useState, useEffect, useRef } from 'react';
import { Clock, BookOpen, FileText, Download, Share2, Printer, Bookmark, ChevronDown } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import rehypeSanitize from 'rehype-sanitize';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';

interface PaperContentProps {
  topic: string;
  selectedSection: string | null;
  paperSections: Record<string, string>;
}

export function PaperContent({ topic, selectedSection, paperSections }: PaperContentProps) {
  const [showDownloadOptions, setShowDownloadOptions] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setShowDownloadOptions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    // Define the proper order of sections
    const sectionOrder = [
      'abstract',
      'introduction', 
      'literature-review',
      'research-background',
      'problem-statement',
      'research-objectives',
      'theoretical-framework',
      'methodology',
      'research-design',
      'materials-equipment',
      'procedures',
      'experimental-design',
      'data-collection',
      'analysis-methods',
      'results',
      'data-analysis',
      'findings',
      'discussion',
      'implications',
      'limitations',
      'future-work',
      'conclusion',
      'references',
      'appendices'
    ];

    // Create a properly formatted markdown document
    let markdownContent = `# ${topic}\n\n`;
    markdownContent += `*Generated by ThinkTome AI - ${currentDate}*\n\n`;
    markdownContent += `---\n\n`;

    // Add sections in proper order, only if they exist and have content
    sectionOrder.forEach(sectionId => {
      if (paperSections[sectionId] && paperSections[sectionId].trim()) {
        const sectionContent = paperSections[sectionId].trim();
        
        // If the section doesn't start with a header, add one
        if (!sectionContent.startsWith('#')) {
          const sectionTitle = sectionId
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
          markdownContent += `## ${sectionTitle}\n\n`;
        }
        
        markdownContent += `${sectionContent}\n\n`;
      }
    });

    // Add any additional sections that weren't in the predefined order
    Object.keys(paperSections).forEach(sectionId => {
      if (!sectionOrder.includes(sectionId) && paperSections[sectionId] && paperSections[sectionId].trim()) {
        const sectionContent = paperSections[sectionId].trim();
        const sectionTitle = sectionId
          .split('-')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
        
        if (!sectionContent.startsWith('#')) {
          markdownContent += `## ${sectionTitle}\n\n`;
        }
        
        markdownContent += `${sectionContent}\n\n`;
      }
    });

    // Add footer
    markdownContent += `---\n\n`;
    markdownContent += `*This research paper was generated using ThinkTome's AI-powered research assistant.*\n`;
    markdownContent += `*For more information, visit: https://thinktome.netlify.app*\n`;

    // Create and download the markdown file
    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${topic.toLowerCase().replace(/\s+/g, '-')}-research-paper.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleDownloadHTML = () => {
    // Define the proper order of sections
    const sectionOrder = [
      'abstract', 'introduction', 'literature-review', 'research-background',
      'problem-statement', 'research-objectives', 'theoretical-framework',
      'methodology', 'research-design', 'materials-equipment', 'procedures',
      'experimental-design', 'data-collection', 'analysis-methods', 'results',
      'data-analysis', 'findings', 'discussion', 'implications', 'limitations',
      'future-work', 'conclusion', 'references', 'appendices'
    ];

    // Create HTML document with academic styling
    let htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${topic} - Research Paper</title>
    <style>
        body { 
            font-family: 'Times New Roman', serif; 
            line-height: 1.6; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 40px 20px; 
            color: #333;
            background-color: #fff;
        }
        h1 { 
            color: #2c3e50; 
            text-align: center; 
            border-bottom: 3px solid #3498db; 
            padding-bottom: 20px; 
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        h2 { 
            color: #34495e; 
            border-bottom: 2px solid #ecf0f1; 
            padding-bottom: 10px; 
            margin-top: 40px;
            font-size: 1.8em;
        }
        h3 { 
            color: #5d6d7e; 
            margin-top: 30px;
            font-size: 1.4em;
        }
        h4, h5, h6 { 
            color: #7f8c8d; 
            margin-top: 25px;
        }
        p { 
            text-align: justify; 
            margin-bottom: 15px; 
            font-size: 1.1em;
        }
        ul, ol { 
            margin-bottom: 15px; 
            padding-left: 30px; 
        }
        li { 
            margin-bottom: 8px; 
        }
        blockquote { 
            border-left: 4px solid #3498db; 
            margin: 20px 0; 
            padding-left: 20px; 
            background-color: #f8f9fa; 
            font-style: italic; 
        }
        code { 
            background-color: #f4f4f4; 
            padding: 2px 6px; 
            border-radius: 3px; 
            font-family: 'Courier New', monospace; 
        }
        pre { 
            background-color: #f8f8f8; 
            padding: 15px; 
            border-radius: 5px; 
            overflow-x: auto; 
            border: 1px solid #e1e8ed; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin: 20px 0; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 12px; 
            text-align: left; 
        }
        th { 
            background-color: #f2f2f2; 
            font-weight: bold; 
        }
        .header-info { 
            text-align: center; 
            color: #7f8c8d; 
            font-style: italic; 
            margin-bottom: 30px; 
        }
        .footer { 
            margin-top: 50px; 
            padding-top: 20px; 
            border-top: 1px solid #ecf0f1; 
            text-align: center; 
            color: #95a5a6; 
            font-size: 0.9em; 
        }
        @media print {
            body { margin: 0; padding: 20px; }
            .no-print { display: none; }
        }
    </style>
</head>
<body>
    <h1>${topic}</h1>
    <div class="header-info">Generated by ThinkTome AI - ${currentDate}</div>
    
`;

    // Convert markdown to basic HTML and add sections in proper order
    sectionOrder.forEach(sectionId => {
      if (paperSections[sectionId] && paperSections[sectionId].trim()) {
        const sectionContent = paperSections[sectionId].trim();
        const sectionTitle = sectionId
          .split('-')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
        
        if (!sectionContent.startsWith('#')) {
          htmlContent += `    <h2>${sectionTitle}</h2>\n`;
        }
        
        // Basic markdown to HTML conversion
        const htmlSection = sectionContent
          .split('\n')
          .map(line => {
            line = line.trim();
            if (!line) return '<br>';
            
            // Headers
            if (line.startsWith('### ')) return `<h3>${line.substring(4)}</h3>`;
            if (line.startsWith('## ')) return `<h2>${line.substring(3)}</h2>`;
            if (line.startsWith('# ')) return `<h1>${line.substring(2)}</h1>`;
            
            // Lists
            if (line.startsWith('* ') || line.startsWith('- ')) {
              return `<li>${line.substring(2)}</li>`;
            }
            if (/^\d+\.\s/.test(line)) {
              return `<li>${line.replace(/^\d+\.\s/, '')}</li>`;
            }
            
            // Regular paragraphs with inline formatting
            return `<p>${line
              .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
              .replace(/\*(.*?)\*/g, '<em>$1</em>')
              .replace(/`(.*?)`/g, '<code>$1</code>')
              .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
            }</p>`;
          })
          .join('\n')
          .replace(/(<li>.*<\/li>)/gs, (match) => {
            if (match.includes('</li>\n<li>')) {
              return `<ul>${match}</ul>`;
            }
            return `<ul>${match}</ul>`;
          })
          .replace(/<\/ul>\n<ul>/g, '')
          .replace(/<br><p>/g, '<p>')
          .replace(/<\/p><br>/g, '</p>');
        
        htmlContent += `    ${htmlSection}\n\n`;
      }
    });

    htmlContent += `
    <div class="footer">
        <p>This research paper was generated using ThinkTome's AI-powered research assistant.</p>
        <p>For more information, visit: <a href="https://thinktome.netlify.app">https://thinktome.netlify.app</a></p>
    </div>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${topic.toLowerCase().replace(/\s+/g, '-')}-research-paper.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleDownloadDOCX = async () => {
    // Define the proper order of sections
    const sectionOrder = [
      'abstract', 'introduction', 'literature-review', 'research-background',
      'problem-statement', 'research-objectives', 'theoretical-framework',
      'methodology', 'research-design', 'materials-equipment', 'procedures',
      'experimental-design', 'data-collection', 'analysis-methods', 'results',
      'data-analysis', 'findings', 'discussion', 'implications', 'limitations',
      'future-work', 'conclusion', 'references', 'appendices'
    ];

    const children: (Paragraph)[] = [];

    // Add title
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: topic,
            bold: true,
            size: 32,
          }),
        ],
        heading: HeadingLevel.TITLE,
        alignment: AlignmentType.CENTER,
        spacing: { after: 400 },
      })
    );

    // Add subtitle with date
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: `Generated by ThinkTome AI - ${currentDate}`,
            italics: true,
            size: 24,
          }),
        ],
        alignment: AlignmentType.CENTER,
        spacing: { after: 600 },
      })
    );

    // Process each section
    sectionOrder.forEach(sectionId => {
      if (paperSections[sectionId] && paperSections[sectionId].trim()) {
        const sectionContent = paperSections[sectionId].trim();
        const sectionTitle = sectionId
          .split('-')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');

        // Add section header if content doesn't start with #
        if (!sectionContent.startsWith('#')) {
          children.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: sectionTitle,
                  bold: true,
                  size: 28,
                }),
              ],
              heading: HeadingLevel.HEADING_1,
              spacing: { before: 400, after: 200 },
            })
          );
        }

        // Parse markdown content and convert to DOCX elements
        const lines = sectionContent.split('\n').filter(line => line.trim());
        
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].trim();
          if (!line) continue;

          // Handle headers
          if (line.startsWith('### ')) {
            children.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: line.substring(4),
                    bold: true,
                    size: 24,
                  }),
                ],
                heading: HeadingLevel.HEADING_3,
                spacing: { before: 300, after: 150 },
              })
            );
          } else if (line.startsWith('## ')) {
            children.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: line.substring(3),
                    bold: true,
                    size: 26,
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 350, after: 175 },
              })
            );
          } else if (line.startsWith('# ')) {
            children.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: line.substring(2),
                    bold: true,
                    size: 28,
                  }),
                ],
                heading: HeadingLevel.HEADING_1,
                spacing: { before: 400, after: 200 },
              })
            );
          } else if (line.startsWith('* ') || line.startsWith('- ')) {
            // Handle bullet points
            const textRuns = parseInlineFormatting(line.substring(2));
            children.push(
              new Paragraph({
                children: textRuns,
                bullet: { level: 0 },
                spacing: { after: 100 },
              })
            );
          } else if (/^\d+\.\s/.test(line)) {
            // Handle numbered lists
            const textRuns = parseInlineFormatting(line.replace(/^\d+\.\s/, ''));
            children.push(
              new Paragraph({
                children: [new TextRun({ text: `${/^\d+/.exec(line)?.[0] || '1'}. ` }), ...textRuns],
                spacing: { after: 100 },
              })
            );
          } else {
            // Handle regular paragraphs
            const textRuns = parseInlineFormatting(line);
            children.push(
              new Paragraph({
                children: textRuns,
                spacing: { after: 200 },
                alignment: AlignmentType.JUSTIFIED,
              })
            );
          }
        }
      }
    });

    // Add footer
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: 'This research paper was generated using ThinkTome\'s AI-powered research assistant.',
            italics: true,
            size: 20,
          }),
        ],
        alignment: AlignmentType.CENTER,
        spacing: { before: 600, after: 200 },
      })
    );

    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: 'For more information, visit: https://thinktome.netlify.app',
            italics: true,
            size: 20,
          }),
        ],
        alignment: AlignmentType.CENTER,
      })
    );

    // Create the document
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: children,
        },
      ],
    });

    // Generate and download
    try {
      const blob = await Packer.toBlob(doc);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${topic.toLowerCase().replace(/\s+/g, '-')}-research-paper.docx`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating DOCX:', error);
    }
  };

  // Helper function to parse inline formatting
  const parseInlineFormatting = (text: string): TextRun[] => {
    const runs: TextRun[] = [];
    const parts = text.split(/(\*\*.*?\*\*|\*.*?\*|`.*?`)/);
    
    parts.forEach(part => {
      if (part.startsWith('**') && part.endsWith('**')) {
        // Bold text
        runs.push(new TextRun({
          text: part.slice(2, -2),
          bold: true,
        }));
      } else if (part.startsWith('*') && part.endsWith('*') && !part.startsWith('**')) {
        // Italic text
        runs.push(new TextRun({
          text: part.slice(1, -1),
          italics: true,
        }));
      } else if (part.startsWith('`') && part.endsWith('`')) {
        // Code text
        runs.push(new TextRun({
          text: part.slice(1, -1),
          font: 'Courier New',
        }));
      } else if (part.trim()) {
        // Regular text
        runs.push(new TextRun({
          text: part,
        }));
      }
    });
    
    return runs.length > 0 ? runs : [new TextRun({ text: text })];
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: topic,
          text: 'Check out this research paper generated by ThinkTome!',
          url: window.location.href,
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    }
  };

  return (
    <div className="md:col-span-3 p-3 sm:p-4 md:p-6 lg:p-8 bg-gray-900 border-t md:border-t-0 md:border-l border-gray-700">
      <div className="max-w-4xl mx-auto">
        {/* Paper Actions */}
        <div className="flex flex-wrap gap-2 mb-6">
          <div className="relative" ref={dropdownRef}>
            <button
              onClick={() => setShowDownloadOptions(!showDownloadOptions)}
              className="inline-flex items-center px-3 py-1.5 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white rounded-lg transition-colors text-sm"
            >
              <Download className="h-4 w-4 mr-2" />
              Download
              <ChevronDown className="h-3 w-3 ml-1" />
            </button>
            
            {showDownloadOptions && (
              <div className="absolute top-full left-0 mt-1 w-48 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-10">
                <button
                  onClick={() => {
                    handleDownload();
                    setShowDownloadOptions(false);
                  }}
                  className="w-full text-left px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors rounded-t-lg"
                >
                  <FileText className="h-4 w-4 inline mr-2" />
                  Markdown (.md)
                </button>
                <button
                  onClick={() => {
                    handleDownloadHTML();
                    setShowDownloadOptions(false);
                  }}
                  className="w-full text-left px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors"
                >
                  <BookOpen className="h-4 w-4 inline mr-2" />
                  HTML Document (.html)
                </button>
                <button
                  onClick={() => {
                    handleDownloadDOCX();
                    setShowDownloadOptions(false);
                  }}
                  className="w-full text-left px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors rounded-b-lg"
                >
                  <FileText className="h-4 w-4 inline mr-2" />
                  Word Document (.docx)
                </button>
              </div>
            )}
          </div>
          <button
            onClick={handlePrint}
            className="inline-flex items-center px-3 py-1.5 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white rounded-lg transition-colors text-sm"
          >
            <Printer className="h-4 w-4 mr-2" />
            Print
          </button>
          <button
            onClick={handleShare}
            className="inline-flex items-center px-3 py-1.5 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white rounded-lg transition-colors text-sm"
          >
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </button>
          <button className="inline-flex items-center px-3 py-1.5 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white rounded-lg transition-colors text-sm">
            <Bookmark className="h-4 w-4 mr-2" />
            Save
          </button>
        </div>

        {/* Paper Header */}
        <div className="mb-8 pb-8 border-b border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center text-sm text-gray-400">
              <Clock className="h-4 w-4 mr-2" />
              <span>{currentDate}</span>
            </div>
            <div className="flex items-center text-sm text-gray-400">
              <BookOpen className="h-4 w-4 mr-2" />
              <span>Academic Research Paper</span>
            </div>
          </div>
          <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary-400 via-purple-400 to-blue-400 font-serif mb-4 leading-tight">
            {topic}
          </h1>
          <div className="flex items-center text-sm text-gray-400">
            <FileText className="h-4 w-4 mr-2" />
            <span>Generated by ThinkTome AI</span>
          </div>
        </div>

        {/* Paper Content */}
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          {selectedSection && paperSections[selectedSection] && (
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              rehypePlugins={[rehypeRaw, rehypeSanitize]}
              components={{
                // Custom styling for headers
                h1: ({ children }) => (
                  <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary-400 to-purple-400 mt-8 sm:mt-10 md:mt-12 mb-4 sm:mb-6 font-serif">
                    {children}
                  </h1>
                ),
                h2: ({ children }) => (
                  <h2 className="text-xl sm:text-2xl md:text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary-400 to-purple-400 mt-8 sm:mt-10 md:mt-12 mb-4 sm:mb-6 font-serif">
                    {children}
                  </h2>
                ),
                h3: ({ children }) => (
                  <h3 className="text-lg sm:text-xl md:text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary-400 to-purple-400 mt-6 sm:mt-8 md:mt-10 mb-3 sm:mb-4 font-serif">
                    {children}
                  </h3>
                ),
                h4: ({ children }) => (
                  <h4 className="text-base sm:text-lg md:text-xl font-bold text-white mt-6 mb-3 font-serif">
                    {children}
                  </h4>
                ),
                h5: ({ children }) => (
                  <h5 className="text-sm sm:text-base md:text-lg font-bold text-white mt-4 mb-2 font-serif">
                    {children}
                  </h5>
                ),
                h6: ({ children }) => (
                  <h6 className="text-sm md:text-base font-bold text-white mt-4 mb-2 font-serif">
                    {children}
                  </h6>
                ),
                // Custom styling for paragraphs
                p: ({ children }) => (
                  <p className="text-gray-300 text-base sm:text-lg leading-relaxed my-4 sm:my-6">
                    {children}
                  </p>
                ),
                // Custom styling for lists
                ul: ({ children }) => (
                  <ul className="list-disc list-inside space-y-2 pl-4 text-gray-300 my-4">
                    {children}
                  </ul>
                ),
                ol: ({ children }) => (
                  <ol className="list-decimal list-inside space-y-2 pl-4 text-gray-300 my-4">
                    {children}
                  </ol>
                ),
                li: ({ children }) => (
                  <li className="pl-2 text-gray-300">
                    {children}
                  </li>
                ),
                // Custom styling for tables
                table: ({ children }) => (
                  <div className="overflow-x-auto my-6 sm:my-8 rounded-lg border border-gray-600 shadow-lg">
                    <table className="min-w-full divide-y divide-gray-600 bg-gray-800">
                      {children}
                    </table>
                  </div>
                ),
                thead: ({ children }) => (
                  <thead className="bg-gray-700">
                    {children}
                  </thead>
                ),
                tbody: ({ children }) => (
                  <tbody className="bg-gray-800 divide-y divide-gray-700">
                    {children}
                  </tbody>
                ),
                tr: ({ children }) => (
                  <tr className="hover:bg-gray-750 transition-colors duration-200">
                    {children}
                  </tr>
                ),
                th: ({ children }) => (
                  <th className="px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider border-b border-gray-600">
                    {children}
                  </th>
                ),
                td: ({ children }) => (
                  <td className="px-6 py-4 text-sm text-gray-300 border-b border-gray-700">
                    <div className="break-words">
                      {children}
                    </div>
                  </td>
                ),
                // Custom styling for blockquotes
                blockquote: ({ children }) => (
                  <blockquote className="border-l-4 border-primary-400 pl-4 my-6 italic text-gray-400 bg-gray-800/50 py-3 rounded-r-lg">
                    {children}
                  </blockquote>
                ),
                // Custom styling for code
                code: ({ children, className }) => {
                  const isInline = !className;
                  return isInline ? (
                    <code className="bg-gray-800 text-primary-300 px-2 py-1 rounded text-sm font-mono">
                      {children}
                    </code>
                  ) : (
                    <code className="block bg-gray-800 text-gray-300 p-4 rounded-lg text-sm font-mono overflow-x-auto my-4">
                      {children}
                    </code>
                  );
                },
                pre: ({ children }) => (
                  <pre className="bg-gray-800 text-gray-300 p-4 rounded-lg text-sm font-mono overflow-x-auto my-4 border border-gray-700">
                    {children}
                  </pre>
                ),
                // Custom styling for strong/bold text
                strong: ({ children }) => (
                  <strong className="font-bold text-white">
                    {children}
                  </strong>
                ),
                // Custom styling for emphasis/italic text
                em: ({ children }) => (
                  <em className="italic text-gray-200">
                    {children}
                  </em>
                ),
                // Custom styling for links
                a: ({ href, children }) => (
                  <a 
                    href={href} 
                    className="text-primary-400 hover:text-primary-300 underline transition-colors"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {children}
                  </a>
                ),
                // Custom styling for images
                img: ({ src, alt }) => (
                  <div className="my-8 sm:my-10 group">
                    <div className="rounded-xl overflow-hidden shadow-xl bg-gray-800/50 p-4 border border-gray-700 transition-transform duration-300 group-hover:scale-[1.02]">
                      <img 
                        src={src} 
                        alt={alt} 
                        className="w-full h-auto rounded-lg"
                      />
                      {alt && (
                        <p className="text-center text-gray-400 text-sm mt-2 italic">
                          {alt}
                        </p>
                      )}
                    </div>
                  </div>
                ),
                // Custom styling for horizontal rules
                hr: () => (
                  <hr className="border-gray-700 my-8" />
                ),
              }}
            >
              {paperSections[selectedSection]}
            </ReactMarkdown>
          )}
        </div>

        {/* Paper Footer */}
        <div className="mt-12 pt-8 border-t border-gray-700">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm text-gray-400">
            <div className="flex items-center mb-4 sm:mb-0">
              <FileText className="h-4 w-4 mr-2" />
              <span>Generated using advanced AI and academic sources</span>
            </div>
            <div className="flex items-center">
              <Clock className="h-4 w-4 mr-2" />
              <span>Last updated: {currentDate}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}